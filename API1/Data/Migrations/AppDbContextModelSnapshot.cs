// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API.Model.Aluno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CursoId")
                        .HasColumnType("integer")
                        .HasColumnName("curso_id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome_aluno");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<int>("TurmaId")
                        .HasColumnType("integer")
                        .HasColumnName("turma_id");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("TurmaId");

                    b.ToTable("tb_aluno", (string)null);
                });

            modelBuilder.Entity("API.Models.Curso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.ToTable("tb_curso", (string)null);
                });

            modelBuilder.Entity("API.Models.Disciplina", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CursoId")
                        .HasColumnType("integer")
                        .HasColumnName("curso_id");

                    b.Property<int?>("CursoId1")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("CursoId1");

                    b.ToTable("tb_disciplina", (string)null);
                });

            modelBuilder.Entity("API.Models.Nota", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("integer")
                        .HasColumnName("aluno_id");

                    b.Property<int?>("AlunoId1")
                        .HasColumnType("integer");

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("integer")
                        .HasColumnName("disciplina_id");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("integer")
                        .HasColumnName("professor_id");

                    b.Property<int?>("ProfessorId1")
                        .HasColumnType("integer");

                    b.Property<string>("Prova")
                        .HasColumnType("text")
                        .HasColumnName("prova");

                    b.Property<int>("Trimestre")
                        .HasColumnType("integer")
                        .HasColumnName("trimestre");

                    b.Property<double>("Valor")
                        .HasColumnType("double precision")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("AlunoId1");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("ProfessorId1");

                    b.ToTable("tb_nota", (string)null);
                });

            modelBuilder.Entity("API.Models.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DisciplinaId")
                        .HasColumnType("integer")
                        .HasColumnName("disciplina_id");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id");

                    b.HasIndex("DisciplinaId");

                    b.ToTable("tb_professor", (string)null);
                });

            modelBuilder.Entity("API.Models.Turma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CursoId")
                        .HasColumnType("integer")
                        .HasColumnName("curso_id");

                    b.Property<int?>("DisciplinaId")
                        .HasColumnType("integer");

                    b.Property<string>("Nome")
                        .HasColumnType("text")
                        .HasColumnName("nome");

                    b.Property<int?>("ProfessorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("DisciplinaId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("tb_turma", (string)null);
                });

            modelBuilder.Entity("API.Model.Aluno", b =>
                {
                    b.HasOne("API.Models.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Turma", "Turma")
                        .WithMany()
                        .HasForeignKey("TurmaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Turma");
                });

            modelBuilder.Entity("API.Models.Disciplina", b =>
                {
                    b.HasOne("API.Models.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Curso", null)
                        .WithMany("Disciplinas")
                        .HasForeignKey("CursoId1");

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("API.Models.Nota", b =>
                {
                    b.HasOne("API.Model.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Model.Aluno", null)
                        .WithMany("Notas")
                        .HasForeignKey("AlunoId1");

                    b.HasOne("API.Models.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Professor", null)
                        .WithMany("Notas")
                        .HasForeignKey("ProfessorId1");

                    b.Navigation("Aluno");

                    b.Navigation("Disciplina");

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("API.Models.Professor", b =>
                {
                    b.HasOne("API.Models.Disciplina", "Disciplina")
                        .WithMany()
                        .HasForeignKey("DisciplinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disciplina");
                });

            modelBuilder.Entity("API.Models.Turma", b =>
                {
                    b.HasOne("API.Models.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Disciplina", null)
                        .WithMany("Turmas")
                        .HasForeignKey("DisciplinaId");

                    b.HasOne("API.Models.Professor", null)
                        .WithMany("Turmas")
                        .HasForeignKey("ProfessorId");

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("API.Model.Aluno", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("API.Models.Curso", b =>
                {
                    b.Navigation("Disciplinas");
                });

            modelBuilder.Entity("API.Models.Disciplina", b =>
                {
                    b.Navigation("Turmas");
                });

            modelBuilder.Entity("API.Models.Professor", b =>
                {
                    b.Navigation("Notas");

                    b.Navigation("Turmas");
                });
#pragma warning restore 612, 618
        }
    }
}
